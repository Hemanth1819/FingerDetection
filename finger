!pip install opencv-python mediapipe protobuf==3.20.3
import cv2
import mediapipe as mp
import numpy as np
import os
os.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'python'

# Initialize MediaPipe hands and drawing utilities
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# Function to count raised fingers for each hand
def count_fingers(hand_landmarks, hand_label):
    # Landmark indices for fingertips and their base joints
    finger_tips_ids = [4, 8, 12, 16, 20]
    base_joints_ids = [2, 5, 9, 13, 17]
    
    fingers_up = 0

    # Thumb detection: special case
    if hand_label == "Right":
        if hand_landmarks.landmark[4].x < hand_landmarks.landmark[2].x:
            fingers_up += 1
    else:  # For Left hand
        if hand_landmarks.landmark[4].x > hand_landmarks.landmark[2].x:
            fingers_up += 1

    # Other fingers (index, middle, ring, pinky)
    for tip_id, base_id in zip(finger_tips_ids[1:], base_joints_ids[1:]):
        tip_y = hand_landmarks.landmark[tip_id].y
        base_y = hand_landmarks.landmark[base_id].y
        if tip_y < base_y:  # The tip is above the base joint, indicating the finger is up
            fingers_up += 1

    return fingers_up

# Start capturing video
cap = cv2.VideoCapture(0)
hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    # Flip frame and convert to RGB
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Process the frame for hand landmarks
    results = hands.process(rgb_frame)
    
    # If hand landmarks are detected
    if results.multi_hand_landmarks and results.multi_handedness:
        for idx, hand_landmarks in enumerate(results.multi_hand_landmarks):
            # Get handedness (Left/Right hand)
            hand_label = results.multi_handedness[idx].classification[0].label
            
            # Draw hand landmarks
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            
            # Count the number of fingers raised for each hand
            num_fingers = count_fingers(hand_landmarks, hand_label)
            
            # Display the number of fingers on the screen at different locations for each hand
            if hand_label == "Right":
                cv2.putText(frame, f'Right Hand: {num_fingers}', (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            else:
                cv2.putText(frame, f'Left Hand: {num_fingers}', (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    
    # Show the frame
    cv2.imshow('Two-Hand Finger Detection', frame)
    
    # Quit the application when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release video capture and close windows
cap.release()
cv2.destroyAllWindows()
